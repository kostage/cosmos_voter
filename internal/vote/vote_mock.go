// Code generated by MockGen. DO NOT EDIT.
// Source: vote.go

// Package vote is a generated GoMock package.
package vote

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVoter is a mock of Voter interface.
type MockVoter struct {
	ctrl     *gomock.Controller
	recorder *MockVoterMockRecorder
}

// MockVoterMockRecorder is the mock recorder for MockVoter.
type MockVoterMockRecorder struct {
	mock *MockVoter
}

// NewMockVoter creates a new mock instance.
func NewMockVoter(ctrl *gomock.Controller) *MockVoter {
	mock := &MockVoter{ctrl: ctrl}
	mock.recorder = &MockVoterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoter) EXPECT() *MockVoterMockRecorder {
	return m.recorder
}

// GetVoting mocks base method.
func (m *MockVoter) GetVoting(arg0 context.Context) ([]Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoting", arg0)
	ret0, _ := ret[0].([]Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoting indicates an expected call of GetVoting.
func (mr *MockVoterMockRecorder) GetVoting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoting", reflect.TypeOf((*MockVoter)(nil).GetVoting), arg0)
}

// HasVoted mocks base method.
func (m *MockVoter) HasVoted(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasVoted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasVoted indicates an expected call of HasVoted.
func (mr *MockVoterMockRecorder) HasVoted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasVoted", reflect.TypeOf((*MockVoter)(nil).HasVoted), arg0, arg1)
}

// Vote mocks base method.
func (m *MockVoter) Vote(arg0 context.Context, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Vote indicates an expected call of Vote.
func (mr *MockVoterMockRecorder) Vote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockVoter)(nil).Vote), arg0, arg1, arg2)
}
