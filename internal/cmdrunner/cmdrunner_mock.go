// Code generated by MockGen. DO NOT EDIT.
// Source: cmdrunner.go

// Package cmdrunner is a generated GoMock package.
package cmdrunner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCmdRunner is a mock of CmdRunner interface.
type MockCmdRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCmdRunnerMockRecorder
}

// MockCmdRunnerMockRecorder is the mock recorder for MockCmdRunner.
type MockCmdRunnerMockRecorder struct {
	mock *MockCmdRunner
}

// NewMockCmdRunner creates a new mock instance.
func NewMockCmdRunner(ctrl *gomock.Controller) *MockCmdRunner {
	mock := &MockCmdRunner{ctrl: ctrl}
	mock.recorder = &MockCmdRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdRunner) EXPECT() *MockCmdRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCmdRunner) Run(arg0 context.Context, arg1 string, arg2 []string, arg3 []byte) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockCmdRunnerMockRecorder) Run(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmdRunner)(nil).Run), arg0, arg1, arg2, arg3)
}
